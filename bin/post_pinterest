#!/usr/bin/env ruby

$: << File.expand_path(File.join(__FILE__, '..', '..', 'lib'))
require 'favrica_sns'
$: << File.expand_path(File.join(__FILE__, '..', '..', 'helper'))
require 'tweet_specific_keyword_helper'
require 'post_pinterest_helper'

include TweetSpecificKeywordHelper
include PostPinterestHelper

OPTIONS = {}
OptionParser.new do |opt|
  opt.on('-k keyword', '--keyword_en', String)  {|v| OPTIONS[:keyword_en]           = v}
  opt.on('-n number_of_post_times',    Integer) {|v| OPTIONS[:number_of_post_times] = v}
  opt.on('-b button_place',            Integer) {|v| OPTIONS[:button_place]         = v}
  opt.on('-l logfile', '--logfile',    String)  {|v| OPTIONS[:logfile]              = v}
  opt.on('-e',         '--execute')             {|v| OPTIONS[:execute]              = v}
  opt.parse!(ARGV)
end

raise OptionParser::MissingArgment unless OPTIONS[:keyword_en]
raise OptionParser::MissingArgment unless OPTIONS[:number_of_post_times]
raise OptionParser::MissingArgment unless OPTIONS[:button_place]

logger = Logger.new(OPTIONS[:logfile] || STDOUT)
logger.level = OPTIONS[:execute] ? Logger::INFO : Logger::DEBUG

logger.info("Searching in Favrica.net with this keyword: #{OPTIONS[:keyword_en]}")

if OPTIONS[:keyword_en].include?('__')
  gender = OPTIONS[:keyword_en].split('__')[1]
else
  gender = ''
end

begin
  keyword = FavricaKeyword.where(keyword_en: OPTIONS[:keyword_en])
rescue => error
  logger.error("Fail to get keyword, because of #{error.message}")
end

source_keyword = []
keyword.each do |node|
  source_keyword << node.keyword_ja
end

begin
  json_data = JSON.parse!(open(URI.encode("#{FavricaSns::FAVRICA_SEARCH_URL_ENDPOINT}#{source_keyword[0]}")).read)
  json_data.shuffle!
rescue => error
  logger.error("Fail to get json data from favrica.net, because of #{error.message}")
end

json_data = json_data.with_gender_adjusted(gender)

if OPTIONS[:execute] && json_data
  for i in 0..(OPTIONS[:number_of_post_times] - 1) do
    json_data.tweet_content[i].post_pinterest(OPTIONS[:keyword_en])
  end
end
