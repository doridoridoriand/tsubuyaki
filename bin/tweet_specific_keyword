#!/usr/bin/env ruby

$: << File.expand_path(File.join(__FILE__, '..', '..', 'lib'))
require 'favrica_sns'
$: << File.expand_path(File.join(__FILE__, '..', '..', 'helper'))
require 'tweet_specific_keyword_helper'

include TweetSpecificKeywordHelper

OPTIONS = {}
OptionParser.new do |opt|
  opt.on('-k keyword_en', '--keyword_en', String)  {|v| OPTIONS[:keyword_en]            = v}
  opt.on('-n number_of_tweet_times',      Integer) {|v| OPTIONS[:number_of_tweet_times] = v}
  opt.on('-l logfile',    '--logfile',    String)  {|v| OPTIONS[:logfile]               = v}
  opt.on('-e',            '--execute')             {|v| OPTIONS[:execute]               = v}
  opt.parse!(ARGV)
end

raise OptionParser::MissingArgument unless OPTIONS[:keyword_en]
raise OptionParser::MissingArgument unless OPTIONS[:number_of_tweet_times]

logger = Logger.new(OPTIONS[:logfile] || STDOUT)
logger.level = OPTIONS[:execute] ? Logger::INFO : Logger::DEBUG

logger.info("start to tweet with keyword: #{OPTIONS[:keyword_en]}")

begin
  keyword = FavricaKeyword.where(keyword_en: OPTIONS[:keyword_en])
  bot_account = BotAccount.where(keyword_en: OPTIONS[:keyword_en])
  keyword_string = []
  keyword.each do |node|
    keyword_string << node.keyword_ja
  end
  # デバッグが面倒なので仮のexecuteを追加
  if (OPTIONS[:execute])
    json_data = JSON.parse!(open(URI.encode("#{FavricaSns::FAVRICA_SEARCH_URL_ENDPOINT}#{keyword_string[0]}")).read)
    p json_data.generate_tweet_content
    p json_data.generate_tweet_content_with_direct_link
  end
rescue => error
  logger.info(error.class)
  logger.info("keyword: #{OPTIONS[:keyword_en]} is not found in database")
end

p bot_account.api_client
