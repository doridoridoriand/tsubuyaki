#!/usr/bin/env ruby

$: << File.expand_path(File.join(__FILE__, '..', '..', 'lib'))
require 'favrica_sns'
$: << File.expand_path(File.join(__FILE__, '..', '..', 'helper'))
require 'tweet_specific_keyword_helper'
require 'bot_account_helper'

include TweetSpecificKeywordHelper
include BotAccountModule

OPTIONS = {}
OptionParser.new do |opt|
  opt.on('-k keyword_en', '--keyword_en', String)  {|v| OPTIONS[:keyword_en]            = v}
  opt.on('-n number_of_tweet_times',      Integer) {|v| OPTIONS[:number_of_tweet_times] = v}
  opt.on('-l logfile',    '--logfile',    String)  {|v| OPTIONS[:logfile]               = v}
  opt.on('-e',            '--execute')             {|v| OPTIONS[:execute]               = v}
  opt.parse!(ARGV)
end

raise OptionParser::MissingArgument unless OPTIONS[:keyword_en]
raise OptionParser::MissingArgument unless OPTIONS[:number_of_tweet_times]

logger = Logger.new(OPTIONS[:logfile] || STDOUT)
logger.level = OPTIONS[:execute] ? Logger::INFO : Logger::DEBUG

logger.info("Searching in farvica.net with this keyword: #{OPTIONS[:keyword_en]}")

begin
  keyword = FavricaKeyword.where(keyword_en: OPTIONS[:keyword_en])
  bot_account = BotAccount.find_by(keyword_en: OPTIONS[:keyword_en])
  source_keyword = []
  keyword.each do |node|
    source_keyword << node.keyword_ja
  end
  json_data = JSON.parse!(open(URI.encode("#{FavricaSns::FAVRICA_SEARCH_URL_ENDPOINT}#{source_keyword[0]}")).read)
  json_data.shuffle!
  if (OPTIONS[:execute])
    rand = Random.new
    for i in 0..(OPTIONS[:number_of_tweet_times] - 1) do
      if (rand(0..1) == 1)
        open(json_data.tweet_content[i][:image].sample) do |data|
          bot_account.api_client.update_with_media("#{json_data.tweet_content[i][:tweet_string]} #{hash_tags(source_keyword[0], json_data.tweet_content[i][:item_keywords])}", data)
        end
        logger.info("tweet with this text: #{json_data.tweet_content[i][:tweet_string]} #{hash_tags(source_keyword[0], json_data.tweet_content[i][:item_keywords])}")
      else
        open(json_data.tweet_content_with_direct_link[i][:image].sample) do |data|
          bot_account.api_client.update_with_media("#{json_data.tweet_content_with_direct_link[i][:tweet_string]} #{hash_tags(source_keyword[0], json_data.tweet_content_with_direct_link[i][:item_keywords])}", data)
        end
        logger.info("tweet with this text: #{json_data.tweet_content_with_direct_link[i][:tweet_string]} #{hash_tags(source_keyword[0], json_data.tweet_content_with_direct_link[i][:item_keywords])}")
      end
    end
  end
  logger.info('tweet end')
rescue => error
  logger.info("keyword: #{OPTIONS[:keyword_en]} is not found in database")
  logger.error("Or error occured because of: #{error.message}")
end

