#!/usr/bin/env ruby

$: << File.expand_path(File.join(__FILE__, '..', '..', 'lib'))
require 'favrica_sns'
$: << File.expand_path(File.join(__FILE__, '..', '..', 'helper'))
require 'tweet_specific_keyword_helper'
require 'bot_account_helper'

include TweetSpecificKeywordHelper
include BotAccountModule

OPTIONS = {}
OptionParser.new do |opt|
  opt.on('-k keyword_en', '--keyword_en', String)  {|v| OPTIONS[:keyword_en]             = v}
  opt.on('-n number_of_follow_users',     Integer) {|v| OPTIONS[:number_of_follow_users] = v}
  opt.on('-l logfile', '--logfile',       String)  {|v| OPTIONS[:logfile]                = v}
  opt.on('-e', '--execute')                        {|v| OPTIONS[:execute]                = v}
  opt.parse!(ARGV)
end

raise OptionParser::MissingArgument unless OPTIONS[:keyword_en]
raise OptionParser::MissingArgument unless OPTIONS[:number_of_follow_users]

logger = Logger.new(OPTIONS[:logfile] || STDOUT)
logger.level = OPTIONS[:execute] ? Logger::INFO : Logger::DEBUG

logger.info("Start follow follower of seed at #{OPTIONS[:keyword_en]} bot.")

bot_account = BotAccount.find_by(keyword_en: OPTIONS[:keyword_en])
seed_accouunt = SeedAccount.find_by(keyword_en: OPTIONS[:keyword_en])
random = Random.new

all_seed_account_followers_id = []
seed_accouunt.each do |seed_accouunt|
  seed_accouunt_followers_id = cache.get("follower_ids_of#{seed_account.name}")
  if !seed_accouunt_followers_id
    begin
      log.info("get follower ids: #{seed_accouunt.name}")
      seed_accouunt_followers_id = bot_account.api_client.follower_ids(seed_accouunt.name).to_a
      cache.set("follower_ids_of_#{seed_accouunt.name}", seed_accouunt_followers_id, 3600 * 24 + random(3600 + 24 * 7))
    rescue => error
      log.error("fail to get follower ids: #{seed_accouunt.name}, #{execption.message}")
    end
  end
  all_seed_account_followers_id.concat(seed_accouunt_followers_id)
end
all_seed_account_followers_id.uniq!

follow_candidate_account_ids = all_seed_account_followers_id - bot_account.friend_ids
follow_target_account_ids = follow_candidate_account_ids.shuffle[0..OPTIONS[:number_of_accounts] - 1]

if OPTIONS[:execute]
  follow_target_account_ids.each do |follow_taget_account_id|
    begin
      bot_account.api_client.follow(follow_taget_account_id)
    rescue => error
      logger.error("fail to follow: #{follow_taget_account_id}, #{error.message}")
    end
  end
end
logger.info('follow task finished')
