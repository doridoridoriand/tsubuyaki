#!/usr/bin/env ruby

$: << File.expand_path(File.join(__FILE__, '..', '..', 'lib'))
require 'favrica_sns'
$: << File.expand_path(File.join(__FILE__, '..', '..', 'helper'))
require 'tweet_specific_keyword_helper'
require 'bot_account_helper'

include TweetSpecificKeywordHelper
include BotAccountModule

OPTIONS = {}
OptionParser.new do |opt|
  opt.on('-k keyword_en', '--keyword_en', String) {|v| OPTIONS[:keyword_en] = v}
  opt.on('-n number_of_follow_users', '--number_of_follow_users', Integer) {|v| OPTIONS[:number_of_follow_users] = v}
  opt.on('-l logfile', '--logifle', String) {|v| OPTIONS[:logfile] = v}
  opt.on('-e', '--execute') {|v| OPTIONS[:execute] = v}
  opt.parse!(ARGV)
end
raise OptionParser::MissingArgument unless OPTIONS[:prefecture_id]
raise OptionParser::MissingArgument unless OPTIONS[:number_of_accounts]

logger = Logger.new(OPTIONS[:logfile] || STDOUT)
logger.level = OPTIONS[:execute] ? Logger::INFO : Logger::DEBUG

logger.info("Start follow friend of mutual account at #{OPTIONS[:keyword_en]} bot")

bot_account = BotAccount.find_by(keyword_en: OPTIONS[:keyword_en])
mutual_account_ids = MutualAccount.find_randomly.api_client.friend_ids.to_a

follow_candidate_ids = mutual_account_ids - bot_account.friend_ids
follow_target_account_ids = follow_candidate_ids.shuffle[0..OPTIONS[:number_of_follow_users] - 1]

follow_target_account_ids.each do |id|
  if OPTIONS[:execute]
    begin
      bot_account.api_client.follow(id)
      logger.info("follow: #{id}")
    rescue => error
      logger.error("fail to follow: #{id}, Because of #{error.message}")
      next
    end
  else
    logger.debug("follow: #{id}")
  end
end
logger.info('finish.')
